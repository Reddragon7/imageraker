// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using ImageRakerToolbar;
namespace ImageRakerToolbarTestProject
{
	/// <summary>
	///This is a test class for ImageRakerToolbar.FilePathMaker and is intended
	///to contain all ImageRakerToolbar.FilePathMaker Unit Tests
	///</summary>
	[TestClass()]
	public class FilePathMakerTest
	{


		private TestContext testContextInstance;

		/// <summary>
		///Gets or sets the test context which provides
		///information about and functionality for the current test run.
		///</summary>
		public TestContext TestContext
		{
			get
			{
				return testContextInstance;
			}
			set
			{
				testContextInstance = value;
			}
		}
		#region Additional test attributes
		// 
		//You can use the following additional attributes as you write your tests:
		//
		//Use ClassInitialize to run code before running the first test in the class
		//
		//[ClassInitialize()]
		//public static void MyClassInitialize(TestContext testContext)
		//{
		//}
		//
		//Use ClassCleanup to run code after all tests in a class have run
		//
		//[ClassCleanup()]
		//public static void MyClassCleanup()
		//{
		//}
		//
		//Use TestInitialize to run code before running each test
		//
		//[TestInitialize()]
		//public void MyTestInitialize()
		//{
		//}
		//
		//Use TestCleanup to run code after each test has run
		//
		//[TestCleanup()]
		//public void MyTestCleanup()
		//{
		//}
		//
		#endregion


		/// <summary>
		/// 확장자가 없을 경우
		///</summary>
		[TestMethod()]
		public void MakeFilePathTest()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.cyworld.com/cymain/122967150155979"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.FileNameDuplicateNotAllowed; // TODO: Initialize to an appropriate value

			//string expected = saveFolder + "\\122967150155979(1).jpg";
			string expected = saveFolder + "\\122967150155979" + FilePathMaker.AppendString + ".jpg";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}

		/// <summary>
		/// 확장자가 소문자가 아닌 경우
		/// </summary>
		[TestMethod()]
		public void MakeFilePathTest2()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.cyworld.com/cymain/122967150155979.JPG"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.FileNameDuplicateNotAllowed; // TODO: Initialize to an appropriate value

			//string expected = saveFolder + "\\122967150155979(1).jpg";
			string expected = saveFolder + "\\122967150155979" + FilePathMaker.AppendString + ".JPG";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}

		/// <summary>
		/// 파일 이름에 쿼리 스트링이 들어있는 경우
		/// </summary>
		[TestMethod()]
		public void MakeFilePathTest3()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.cyworld.com/cymain/download.blog?test=1234"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.FileNameDuplicateNotAllowed; // TODO: Initialize to an appropriate value

			string expected = saveFolder + "\\download.blog%3ftest%3d1234" + FilePathMaker.AppendString + ".jpg";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}


		/// <summary>
		/// test partial url
		/// </summary>
		[TestMethod()]
		public void MakeFilePathTest4()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.hello.com/test.jpg"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.PartialUrl; // TODO: Initialize to an appropriate value

			string expected = saveFolder + "\\www.hello.com%2ftest" + FilePathMaker.AppendString + ".jpg";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}

		/// <summary>
		/// test partial url2
		/// </summary>
		[TestMethod()]
		public void MakeFilePathTest5()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.hello.com/1/test.jpg"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.PartialUrl; // TODO: Initialize to an appropriate value

			string expected = saveFolder + "\\1%2ftest" + FilePathMaker.AppendString + ".jpg";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}

		/// <summary>
		/// test partial url3
		/// </summary>
		[TestMethod()]
		public void MakeFilePathTest6()
		{
			string saveFolder = "D:\\My Documents\\ImageRaker\\etc"; // TODO: Initialize to an appropriate value

			FilePathMaker target = new FilePathMaker(saveFolder);

			string url = "http://www.hello.com/1/2/test.jpg"; // TODO: Initialize to an appropriate value

			FilePathMaker.FileNameMakingMethod method = FilePathMaker.FileNameMakingMethod.PartialUrl; // TODO: Initialize to an appropriate value

			string expected = saveFolder + "\\2%2ftest" + FilePathMaker.AppendString + ".jpg";
			string actual;

			actual = target.MakeFilePath(url, method);

			Assert.AreEqual(expected, actual, "ImageRakerToolbar.FilePathMaker.MakeFilePath did not return the expected value.");
		}
	}


}
