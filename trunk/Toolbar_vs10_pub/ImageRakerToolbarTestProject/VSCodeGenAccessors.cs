// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ImageRakerToolbarTestProject
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class ImageRakerToolbar_ImageRakerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::ImageRakerToolbar.ImageRaker));
    
    internal ImageRakerToolbar_ImageRakerAccessor(global::ImageRakerToolbar.ImageRaker target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.Threading.Thread mainThread {
        get {
            global::System.Threading.Thread ret = ((global::System.Threading.Thread)(m_privateObject.GetField("mainThread")));
            return ret;
        }
        set {
            m_privateObject.SetField("mainThread", value);
        }
    }
    
    internal global::System.Threading.Thread[] workerThreads {
        get {
            global::System.Threading.Thread[] ret = ((global::System.Threading.Thread[])(m_privateObject.GetField("workerThreads")));
            return ret;
        }
        set {
            m_privateObject.SetField("workerThreads", value);
        }
    }
    
    internal int numOfThreads {
        get {
            int ret = ((int)(m_privateObject.GetField("numOfThreads")));
            return ret;
        }
        set {
            m_privateObject.SetField("numOfThreads", value);
        }
    }
    
    internal global::System.Threading.ManualResetEvent[] manualEvents {
        get {
            global::System.Threading.ManualResetEvent[] ret = ((global::System.Threading.ManualResetEvent[])(m_privateObject.GetField("manualEvents")));
            return ret;
        }
        set {
            m_privateObject.SetField("manualEvents", value);
        }
    }
    
    internal int timeout {
        get {
            int ret = ((int)(m_privateObject.GetField("timeout")));
            return ret;
        }
        set {
            m_privateObject.SetField("timeout", value);
        }
    }
    
    internal string[] urls {
        get {
            string[] ret = ((string[])(m_privateObject.GetField("urls")));
            return ret;
        }
        set {
            m_privateObject.SetField("urls", value);
        }
    }
    
    internal int currentUrlIndex {
        get {
            int ret = ((int)(m_privateObject.GetField("currentUrlIndex")));
            return ret;
        }
        set {
            m_privateObject.SetField("currentUrlIndex", value);
        }
    }
    
    internal int numOfSucceed {
        get {
            int ret = ((int)(m_privateObject.GetField("numOfSucceed")));
            return ret;
        }
        set {
            m_privateObject.SetField("numOfSucceed", value);
        }
    }
    
    internal int numOfFailed {
        get {
            int ret = ((int)(m_privateObject.GetField("numOfFailed")));
            return ret;
        }
        set {
            m_privateObject.SetField("numOfFailed", value);
        }
    }
    
    internal object lockThis {
        get {
            object ret = ((object)(m_privateObject.GetField("lockThis")));
            return ret;
        }
        set {
            m_privateObject.SetField("lockThis", value);
        }
    }
    
    internal global::ImageRakerToolbar.FilePathMaker filePathMaker {
        get {
            global::ImageRakerToolbar.FilePathMaker ret = ((global::ImageRakerToolbar.FilePathMaker)(m_privateObject.GetField("filePathMaker")));
            return ret;
        }
        set {
            m_privateObject.SetField("filePathMaker", value);
        }
    }
    
    internal string saveFolder {
        get {
            string ret = ((string)(m_privateObject.GetField("saveFolder")));
            return ret;
        }
        set {
            m_privateObject.SetField("saveFolder", value);
        }
    }
    
    internal string refererUrl {
        get {
            string ret = ((string)(m_privateObject.GetField("refererUrl")));
            return ret;
        }
        set {
            m_privateObject.SetField("refererUrl", value);
        }
    }
    
    internal global::ImageRakerToolbar.FilePathMaker.FileNameMakingMethod fileNameMakingMethod {
        get {
            global::ImageRakerToolbar.FilePathMaker.FileNameMakingMethod ret = ((global::ImageRakerToolbar.FilePathMaker.FileNameMakingMethod)(m_privateObject.GetField("fileNameMakingMethod")));
            return ret;
        }
        set {
            m_privateObject.SetField("fileNameMakingMethod", value);
        }
    }
    
    internal void MainThread(object param) {
        object[] args = new object[] {
                param};
        m_privateObject.Invoke("MainThread", new System.Type[] {
                    typeof(object)}, args);
    }
    
    internal string GetNextUrl() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("GetNextUrl", new System.Type[0], args)));
        return ret;
    }
    
    internal void RakerThread(object param) {
        object[] args = new object[] {
                param};
        m_privateObject.Invoke("RakerThread", new System.Type[] {
                    typeof(object)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class ImageRakerToolbar_UsageReporterAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("ImageRakerToolbar", "ImageRakerToolbar.UsageReporter");
    
    internal ImageRakerToolbar_UsageReporterAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor Instance {
        get {
            object _ret_val = m_privateType.GetStaticProperty("Instance");
            global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor(_ret_val);
            }
            global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor ret = _ret;
            return ret;
        }
    }
    
    internal string UsageReportUrl {
        get {
            string ret = ((string)(m_privateObject.GetField("UsageReportUrl")));
            return ret;
        }
        set {
            m_privateObject.SetField("UsageReportUrl", value);
        }
    }
    
    internal string AgreedReportUrl {
        get {
            string ret = ((string)(m_privateObject.GetField("AgreedReportUrl")));
            return ret;
        }
        set {
            m_privateObject.SetField("AgreedReportUrl", value);
        }
    }
    
    internal string ErrorReportUrl {
        get {
            string ret = ((string)(m_privateObject.GetField("ErrorReportUrl")));
            return ret;
        }
        set {
            m_privateObject.SetField("ErrorReportUrl", value);
        }
    }
    
    internal global::System.Threading.Thread reportThread {
        get {
            global::System.Threading.Thread ret = ((global::System.Threading.Thread)(m_privateObject.GetField("reportThread")));
            return ret;
        }
        set {
            m_privateObject.SetField("reportThread", value);
        }
    }
    
    internal string macAddress {
        get {
            string ret = ((string)(m_privateObject.GetField("macAddress")));
            return ret;
        }
        set {
            m_privateObject.SetField("macAddress", value);
        }
    }
    
    internal string osInfo {
        get {
            string ret = ((string)(m_privateObject.GetField("osInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("osInfo", value);
        }
    }
    
    internal string ieInfo {
        get {
            string ret = ((string)(m_privateObject.GetField("ieInfo")));
            return ret;
        }
        set {
            m_privateObject.SetField("ieInfo", value);
        }
    }
    
    internal static global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor instance {
        get {
            object _ret_val = m_privateType.GetStaticField("instance");
            global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor _ret = null;
            if ((_ret_val != null)) {
                _ret = new global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor(_ret_val);
            }
            global::ImageRakerToolbarTestProject.ImageRakerToolbar_UsageReporterAccessor ret = _ret;
            return ret;
        }
        set {
            m_privateType.SetStaticField("instance", value);
        }
    }
    
    internal static string ExceptionMessageBoxStringForAgreed {
        get {
            string ret = ((string)(m_privateType.GetStaticField("ExceptionMessageBoxStringForAgreed")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ExceptionMessageBoxStringForAgreed", value);
        }
    }
    
    internal static string ExceptionMessageBoxStringForDisagreed {
        get {
            string ret = ((string)(m_privateType.GetStaticField("ExceptionMessageBoxStringForDisagreed")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ExceptionMessageBoxStringForDisagreed", value);
        }
    }
    
    internal static object CreatePrivate() {
        object[] args = new object[0];
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("ImageRakerToolbar", "ImageRakerToolbar.UsageReporter", new System.Type[0], args);
        return priv_obj.Target;
    }
    
    internal void SendUsageReport(string pageUrl, int total, int failed, int elapsed) {
        object[] args = new object[] {
                pageUrl,
                total,
                failed,
                elapsed};
        m_privateObject.Invoke("SendUsageReport", new System.Type[] {
                    typeof(string),
                    typeof(int),
                    typeof(int),
                    typeof(int)}, args);
    }
    
    internal void SendAgreedOnImproveProgramReport(bool agreed) {
        object[] args = new object[] {
                agreed};
        m_privateObject.Invoke("SendAgreedOnImproveProgramReport", new System.Type[] {
                    typeof(bool)}, args);
    }
    
    internal string ReadTextFromFile(string path, int bytesToRead) {
        object[] args = new object[] {
                path,
                bytesToRead};
        string ret = ((string)(m_privateObject.Invoke("ReadTextFromFile", new System.Type[] {
                    typeof(string),
                    typeof(int)}, args)));
        return ret;
    }
    
    internal void SendErrorReport(global::System.Exception ex) {
        object[] args = new object[] {
                ex};
        m_privateObject.Invoke("SendErrorReport", new System.Type[] {
                    typeof(global::System.Exception)}, args);
    }
    
    internal void Report(System.Collections.Generic.Dictionary<string, string> post, string url, bool send) {
        object[] args = new object[] {
                post,
                url,
                send};
        m_privateObject.Invoke("Report", new System.Type[] {
                    typeof(System.Collections.Generic.Dictionary<string, string>),
                    typeof(string),
                    typeof(bool)}, args);
    }
    
    internal void ReportThread(object param) {
        object[] args = new object[] {
                param};
        m_privateObject.Invoke("ReportThread", new System.Type[] {
                    typeof(object)}, args);
    }
    
    internal void Initialize() {
        object[] args = new object[0];
        m_privateObject.Invoke("Initialize", new System.Type[0], args);
    }
    
    internal static bool ShowExceptionMessageBox() {
        object[] args = new object[0];
        bool ret = ((bool)(m_privateType.InvokeStatic("ShowExceptionMessageBox", new System.Type[0], args)));
        return ret;
    }
    
    internal static string GetIEVersion() {
        object[] args = new object[0];
        string ret = ((string)(m_privateType.InvokeStatic("GetIEVersion", new System.Type[0], args)));
        return ret;
    }
    
    internal string FindMACAddress() {
        object[] args = new object[0];
        string ret = ((string)(m_privateObject.Invoke("FindMACAddress", new System.Type[0], args)));
        return ret;
    }
}
}
